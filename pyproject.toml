[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "valids"
description = "Validation library written in Rust"
readme = "README.md"
requires-python = ">=3.9"
keywords = []
authors = [
  { name = "Tomas Perez Alvarez", email = "tomasperezalvarez@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
# https://hatch.pypa.io/latest/config/dependency/
dependencies = [
  
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
  "pytest",
  "pytest-cov",
  "mypy",
  "ruff",
  "black",
  "pip-tools",
  "hatch",
  "mypy",
  "mkdocs-material",
]

[project.urls]
Documentation = "https://github.com/mvp-projects/valids#readme"
Issues = "https://github.com/mvp-projects/valids/issues"
Source = "https://github.com/mvp-projects/valids"

[tool.hatch.version]
path = "valids/__about__.py"

[tool.coverage.run]
branch = true
parallel = true
omit = [
  "valids/__about__.py",
  "valids/logging.py"
]
relative_files = true

[tool.coverage.report]
precision = 1
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "@overload",
  "raise NotImplementedError"
]


[tool.ruff.isort]
force-wrap-aliases = true
combine-as-imports = true

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff]
# https://github.com/charliermarsh/ruff#is-ruff-compatible-with-black
line-length = 88

ignore = [
  "ANN101", # Missing type annotation for `self` in method
  "D203", # 1 blank line required before class docstring
  "D212", # Multi-line docstring summary should start at the first line
  "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `*args`, `**kwargs`
]

select = [
  "E",
  "F",
  "D",
  "W",
  "I",
  "C90",
  "UP",
  "N",
  "ANN",
  "S",
  "BLE",
  "FBT",
  "A",
  "B",
  "C4",
  "T20",
  "ICN",
  "Q",
  "RET",
  "TID",
  "SIM",
  "ARG",
  "ERA",
  "PGH",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "RUF",
  "YTT",
  "DTZ",
  "PIE",
  "PT",
  "ISC"
]

fix = true

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"tests/*.py" = [
  "S101" # Use of `assert` detected
]
"__init__.py" = [
  "D104" # Missing docstring in public package
]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
xfail_strict = true
addopts =[
  "--cov-fail-under=50", 
  "--cov-report=term-missing:skip-covered",
  "--cov-config=pyproject.toml",
  "--cov=valids"
]

[tool.mypy]
files = [
  "valids",
  "tests"
]

# temporarily ignore some files
show_error_codes = true
follow_imports = 'silent'
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
warn_unused_configs = true
disallow_subclassing_any = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "_valids_rs"
ignore_missing_imports = true

[tool.maturin]
# "extension-module" tells pyo3 we want to build an extension module (skips linking against libpython.so)
features = ["pyo3/extension-module"]
